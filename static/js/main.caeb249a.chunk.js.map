{"version":3,"sources":["assets/qfpLogo.png","firebase.js","Lists.js","GetMovieDetails.js","AddToLists.js","MovieSearch.js","MovieDetails.js","WatchMovie.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Lists","handleUserInput","e","setState","userListName","target","value","handleUserListName","preventDefault","state","usersList","find","list","key","swal","title","text","button","database","ref","push","handleDeleteList","listToDelete","buttons","dangerMode","then","willDelete","dbRef","child","remove","handleReload","handleMovieName","object","stateToSet","movie","info","handleDeleteMovie","listName","movieObject","refKey","id","handleMovieList","currentTarget","close","querySelector","open","movieList","parentNode","nextElementSibling","classList","toggle","hideLists","props","hideListsFunc","this","on","response","data","val","listData","className","isHidden","onClick","action","onSubmit","htmlFor","onChange","required","type","placeholder","map","length","index","to","Component","GetMovieDetails","movieID","axios","url","params","api_key","movieDetails","catch","AddToLists","event","checkIfMovieExist","movieId","stateToBeSet","dataFromDb","indexOf","clickHandler","movieInfo","genres","genre","name","details","runtime","getMovieDetails","userLists","listInfo","href","aria-hidden","MovieSearch","handleKeyword","keyword","searchForMovies","moviesWithDetails","query","promises","results","a","Promise","all","filteredMovies","filter","poster_path","movies","handleSubmit","match","src","alt","MovieDetails","componentDidMount","credits","director","crew","job","cast","castMember","directors","videos","undefined","videoLink","movieGenre","credit_id","actor","overview","rel","WatchMovie","getGenres","ListMovies","forEach","uniqueGenres","listGenres","selectedGenre","selectedTime","time","parseInt","qualifyingMovies","selectedIndex","Math","floor","random","movieToWatch","history","handleChange","App","window","innerWidth","handleListsShow","listState","listsShown","path","component","exact","render","logo","Boolean","location","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"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","file":"static/js/main.caeb249a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/qfpLogo.48b3d236.png\";","// firebase.js\r\nimport firebase from 'firebase';\r\nimport 'firebase/database';\r\n\r\n\r\n\r\n  const firebaseConfig = {\r\n    apiKey: \"AIzaSyAmkko3XAdO0l3amrDc4VMBv9e0xuCfEbo\",\r\n    authDomain: \"quickflickpicker.firebaseapp.com\",\r\n    databaseURL: \"https://quickflickpicker.firebaseio.com\",\r\n    projectId: \"quickflickpicker\",\r\n    storageBucket: \"quickflickpicker.appspot.com\",\r\n    messagingSenderId: \"981312277648\",\r\n    appId: \"1:981312277648:web:489979be7011747edd9c15\"\r\n  };\r\n  // Initialize Firebase\r\n  firebase.initializeApp(firebaseConfig);\r\n\r\nexport default firebase;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React, { Component } from 'react';\r\nimport firebase from './firebase';\r\nimport {Link} from 'react-router-dom';\r\nimport './lists.css';\r\nimport swal from 'sweetalert';\r\n\r\nclass Lists extends Component {\r\n    constructor () {\r\n        super ()\r\n        this.state = {\r\n            dbRef: firebase.database().ref(),\r\n            usersList: [],\r\n            userListName: '',\r\n        }\r\n    }\r\n\r\n    //Connect our state with firebase\r\n    componentDidMount () {\r\n        //on value change collect data\r\n        this.state.dbRef.on('value', (response) => {\r\n            const data = response.val();\r\n            //make empty array\r\n            const stateToSet = []\r\n            //loop through our data\r\n            for (let key in data) {\r\n                const listData = {\r\n                    key: key,\r\n                    info: data[key]\r\n                }\r\n                //push each piece of data to our empty array\r\n                stateToSet.push(listData);\r\n            }\r\n            //set state to our array\r\n            this.setState({\r\n                usersList: stateToSet,\r\n            }, \r\n            // ()=>{\r\n            //     this.props.updateParentListFunc(this.state.usersList);\r\n            // }\r\n            )\r\n        })\r\n    }\r\n\r\n    // logs the changes when user types into input\r\n    handleUserInput = (e)=>{\r\n        this.setState({\r\n            userListName: e.target.value,\r\n        });\r\n    }\r\n\r\n    // make a function that records the value of the user input\r\n    handleUserListName = (e) => {\r\n        // prevent default action\r\n        e.preventDefault();\r\n\r\n        // checks if already have list with name\r\n        const checkForSameName = this.state.usersList.find((list)=>{\r\n            return list.key === this.state.userListName;\r\n        })\r\n        \r\n        // check if the name is already existing\r\n         if (checkForSameName){\r\n            swal({\r\n                title: 'You already have a list with that name!',\r\n                text: 'Please create a unique name for your list',\r\n                button: 'OK',\r\n            })\r\n        } else {\r\n            // create new reference point in database\r\n            const newList = firebase.database().ref(this.state.userListName);\r\n            // push the name on submit to create node in firebase\r\n            newList.push(this.state.userListName);\r\n        }\r\n\r\n        // set to empty string \r\n        this.setState({\r\n            userListName: '',\r\n        })\r\n\r\n    }\r\n\r\n    // make a function that deletes the specific list\r\n    handleDeleteList = (listToDelete) => {\r\n        // deletes the list\r\n        swal({\r\n            title: `Are you sure you want to delete the list: ${listToDelete}?`,\r\n            buttons: [\"Cancel\", \"Yes please\"],\r\n            dangerMode: true,\r\n        })\r\n        .then((willDelete) => {\r\n            if (willDelete) {\r\n                swal({\r\n                    title: `Your list was deleted!`,\r\n                })\r\n              this.state.dbRef.child(listToDelete).remove();\r\n            }\r\n          });\r\n    }\r\n\r\n    handleReload = (e) => {\r\n        e.preventDefault();\r\n    \r\n    }\r\n\r\n    handleMovieName = (object) => {\r\n        const stateToSet = [];\r\n        for(let movie in object.info) {\r\n            if (object.info[movie] === object.key) {\r\n                continue;\r\n            }\r\n            stateToSet.push(object.info[movie]);\r\n        }\r\n        return stateToSet;\r\n    }\r\n\r\n    handleDeleteMovie = (listName, movieObject) => {\r\n        swal({\r\n            title: `Are you sure you want to delete the movie: ${movieObject.title} from the list: ${listName.key}?`,\r\n            buttons: [\"Cancel\", \"Yes please\"],\r\n            dangerMode: true,\r\n        })\r\n        .then((willDelete) => {\r\n            if (willDelete) {\r\n            // make empty variable to store the reference key in DB \r\n            let refKey;\r\n            // loop through and see if the id of the movie in DB matches the movie selected, make the reference key that specific movie\r\n            for (let movie in listName.info) {\r\n\r\n                if (listName.info[movie] === listName.key) {\r\n                    continue;\r\n                } else if (listName.info[movie].id === movieObject.id) {\r\n                    refKey = movie;\r\n                }\r\n            }\r\n            // make variable to get the reference point in the database\r\n            const reference = firebase.database().ref(listName.key);\r\n            // delete the movie with the specifc key\r\n            reference.child(refKey).remove();\r\n            }\r\n        }); \r\n    }\r\n\r\n    handleMovieList = (e) => {\r\n        //Get variable for button\r\n        const button = e.currentTarget;\r\n\r\n        //Make variables for close and open chevrons.\r\n        const close = button.querySelector(\".closeMovies\");\r\n        const open = button.querySelector(\".showMovies\");\r\n\r\n        //Get variable for movies list by selecting parent and then next sibling.\r\n        const movieList = button.parentNode.nextElementSibling;\r\n        //In case lists are loading make sure the the movie list element is not null, so it will not break the code.\r\n        if(movieList !== null){\r\n            movieList.classList.toggle(\"activeMovieList\");\r\n        }\r\n\r\n        //Hide Close/Hide Open\r\n        close.classList.toggle(\"changeClose\");\r\n        open.classList.toggle(\"changeClose\");\r\n    }\r\n\r\n    // function to hide the lists\r\n    hideLists = () => {\r\n        this.props.hideListsFunc(false);\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"yourLists\" id={this.props.isHidden}>\r\n                <div className=\"wrapper\">\r\n                    <button className=\"hideLists\" onClick={this.hideLists}><i className=\"fas fa-times\"></i></button>\r\n                    <div className=\"asideContainer\">\r\n                        <h2>Your Lists:</h2>\r\n                        <form className=\"listInput\" action=\"\" onSubmit={this.handleUserListName}>\r\n                            <div className=\"listInputContainer\">\r\n                                <label className=\"visuallyHidden\" htmlFor=\"listName\">Please enter a list name</label>\r\n                                <input onChange={this.handleUserInput} required type=\"text\" id=\"listName\" placeholder=\"New list name\" value={this.state.userListName}/>\r\n                            </div>\r\n                            <div className=\"submitButtonContainer\">\r\n                                <button className=\"roundButton\" type=\"submit\" title=\"Create a new list\"><i className=\"fas fa-plus\"></i></button>\r\n                            </div>\r\n                        </form>\r\n                    </div>\r\n            \r\n                    <ul className=\"movieListContainer\">\r\n                        {\r\n                            this.state.usersList.map((list)=>{\r\n                                return(\r\n                                    <li className=\"movieList\" key={list.key}>\r\n                                        <div className=\"dropDownContainer\">\r\n                                            <div className=\"dropDownButton\" onClick={this.handleMovieList}>\r\n                                                <h3>{list.key}</h3>\r\n                                                <p className=\"showMovies\" title=\"Open list\"><i className=\"fas fa-chevron-down\"></i></p>\r\n                                                <p className=\"closeMovies changeClose\" title=\"Close list\"><i className=\"fas fa-times\"></i></p>\r\n                                            </div>\r\n                                            <button onClick={() => { this.handleDeleteList(list.key) }} className=\"deleteListButton\" title=\"Delete list\"><i className=\"fas fa-trash-alt\"></i></button>\r\n                                        </div>\r\n                                        <div className=\"movies\">\r\n                                            <ul className=\"moviesDisplayed\">\r\n                                                {\r\n                                                this.handleMovieName(list).length===0 ? \r\n                                                <li className=\"noMoviesText\"> No movies in this list</li>:\r\n                                                this.handleMovieName(list).map((movie, index) => {\r\n                                                    return (\r\n                                                        <li className=\"listItem\" key={index}>\r\n                                                            <p>{movie.title}</p>\r\n                                                            <button className=\"deleteButton\" onClick={() => { this.handleDeleteMovie(list, movie) }} title=\"Delete movie\"><i className=\"fas fa-trash-alt\"></i></button>\r\n                                                        </li>\r\n                                                    )\r\n                                                })\r\n                                            }\r\n                                            </ul>\r\n                                            <div className=\"linkContainer\">\r\n                                                {this.handleMovieName(list).length !== 0 ? <Link className=\"watchMovieBtn\" to={`/watch-movie/${list.key}`}>Watch Movie</Link>\r\n                                                    : null\r\n                                                }\r\n\r\n\r\n                                            </div>\r\n                                        </div>\r\n                                    </li>\r\n                                )\r\n                            })\r\n                        }\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Lists; \r\n\r\n","import { Component } from 'react';\r\nimport axios from 'axios';\r\nimport swal from 'sweetalert';\r\n\r\n// this component is used only to get the movie details by passing the movie id \r\n// this component is created for reusabilty purpose and it does not returen any visual items\r\nclass GetMovieDetails extends Component {\r\n    componentDidMount(){\r\n        if(typeof this.props.movieID != \"undefined\"){\r\n                axios ({\r\n                    url: `https://api.themoviedb.org/3/movie/${this.props.movieID}`,\r\n                    params: {\r\n                        api_key: '8341ba99fae06408554c7e8411e4a4f9',\r\n                    }\r\n                }).then(response => {\r\n                    const movie = response.data;\r\n                    this.props.movieDetails(movie);\r\n                }).catch(() => {\r\n                    swal({\r\n                        title: 'Something went wrong!! Please try again later!!',\r\n                        button: 'OK',\r\n                    }) \r\n                });\r\n        } \r\n    }\r\n\r\n    render() {\r\n        return(null);\r\n    }\r\n}\r\nexport default GetMovieDetails","import React, { Component } from 'react';\r\nimport firebase from './firebase.js';\r\nimport './addToLists.css';\r\nimport GetMovieDetails from './GetMovieDetails.js';\r\nimport swal from 'sweetalert';\r\n\r\nclass AddToLists extends Component {\r\n\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            userLists: [],\r\n            movieDetails: null,\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        // fetch all the lists from the database\r\n        const dbRef = firebase.database().ref();\r\n        dbRef.on('value', (response) => {\r\n            const dataFromDb = response.val();\r\n            const stateToBeSet = [];\r\n            for (let key in dataFromDb) {\r\n                const listInfo = {\r\n                    key: key,\r\n                }\r\n                stateToBeSet.push(listInfo);\r\n            }\r\n            this.setState({\r\n                userLists: stateToBeSet,\r\n            })\r\n        })\r\n    }\r\n    //to prevent the \"+\" from reloading\r\n    handleReload = (event) => {\r\n        event.preventDefault();\r\n    }\r\n\r\n    // a function to check if the movie is already in the list\r\n    checkIfMovieExist = (listName, movieId) => {\r\n        const stateToBeSet = [];\r\n        const dbRef = firebase.database().ref(listName);\r\n        dbRef.on('value', (response) => {\r\n            const dataFromDb = response.val();\r\n            for (let key in dataFromDb) {\r\n                if (dataFromDb[key] === listName) {\r\n                    continue;\r\n                }\r\n                stateToBeSet.push(dataFromDb[key].id);\r\n            }\r\n        });\r\n        if (stateToBeSet.indexOf(movieId) > -1) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    // to handle the click on the list name (add the movie to the list)\r\n    clickHandler = (event, listName) => {\r\n        event.preventDefault();\r\n        const dbRef = firebase.database().ref(listName);\r\n        const movieInfo = this.state.movieDetails;\r\n        if (this.checkIfMovieExist(listName, movieInfo.id)) {\r\n            swal({\r\n                title: 'The movie is already in the list!',\r\n                button: 'OK',\r\n            })\r\n        }\r\n        else {\r\n            //adding the movie to the list\r\n            const genres = movieInfo.genres.map((genre) => {\r\n                return genre.name\r\n            })\r\n            const details = {\r\n                id: movieInfo.id,\r\n                title: movieInfo.title,\r\n                runtime: movieInfo.runtime,\r\n                genre: genres\r\n            }\r\n            dbRef.push(details);\r\n            swal({\r\n                title: 'The movie has been added to the list successfully!',\r\n                button: 'OK',\r\n            })\r\n        }\r\n    }\r\n\r\n    // this function is used to pass props from a child component (GetMovieDetails) to this component\r\n    getMovieDetails = (movieDetails) => {\r\n        this.setState({\r\n            movieDetails: movieDetails,\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const userLists = this.state.userLists;\r\n        return (\r\n            <div className=\"addToLists\">\r\n                <div className=\"listMenu\">\r\n                    <a href=\"/\" onClick={this.handleReload} className=\"roundButton\" >\r\n                        <span aria-hidden=\"true\" >&#43;</span>\r\n                    </a>\r\n                    <ul className=\"listSubMenu moviesDisplayed\">\r\n                        {userLists.map((list, index) => {\r\n                            return (\r\n                                <li key={index} className=\"listItem\" onClick={(event) => { this.clickHandler(event, list.key) }}>\r\n                                    <GetMovieDetails movieID={this.props.movieId}\r\n                                        movieDetails={this.getMovieDetails} />\r\n                                    <a href=\"/\" className=\"listLinks\" >{list.key}</a>\r\n                                </li>\r\n                            )\r\n                        })}\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default AddToLists;","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport AddToLists from './AddToLists.js';\r\nimport './addToLists.css';\r\nimport { Link } from 'react-router-dom';\r\nimport swal from 'sweetalert';\r\n\r\nclass MovieSearch extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            keyword: '',\r\n            movies: [],\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        // to check if the keyword is passed in the URL and this will happen only if the user clicks on \"back to result link\"\r\n        if (typeof this.props.match.params.keyword != 'undefined') {\r\n            const keyword = this.props.match.params.keyword;\r\n            this.setState({\r\n                keyword: keyword,\r\n            }, () => {\r\n                this.searchForMovies();\r\n            });\r\n        }\r\n    }\r\n\r\n    // to handle the changes of the keyword textbox\r\n    handleKeyword = (event) => {\r\n        this.setState({\r\n            keyword: event.target.value,\r\n        })\r\n    }\r\n\r\n    //to search for movies by a keyword in the api\r\n    searchForMovies = () => {\r\n        let moviesWithDetails = [];\r\n        axios({\r\n            url: 'https://api.themoviedb.org/3/search/movie',\r\n            params: {\r\n                api_key: '8341ba99fae06408554c7e8411e4a4f9',\r\n                query: this.state.keyword,\r\n            }\r\n        }).then((response) => {\r\n            const movies = response.data.results;\r\n            const promises = movies.map(async (movie) => {\r\n                //to get the details for each movie \r\n                // we needed to do this beacuse the previous api call doesn't return the runtime of the movie\r\n                const response = await axios({\r\n                    url: `https://api.themoviedb.org/3/movie/${movie.id}`,\r\n                    params: {\r\n                        api_key: '8341ba99fae06408554c7e8411e4a4f9',\r\n                    }\r\n                });\r\n                const movieDetails = response.data;\r\n                moviesWithDetails.push(movieDetails);\r\n            });\r\n            Promise.all(promises).then(() => {\r\n                const filteredMovies = moviesWithDetails.filter((movie) => {\r\n                    //return only the movies with genre, poster and runtime\r\n                    return (movie.poster_path != null && movie.genres.length > 0 && movie.runtime !== null)\r\n                });\r\n                this.setState({\r\n                    movies: filteredMovies,\r\n                }, () => {\r\n                    if (this.state.movies.length === 0) {\r\n                        swal({\r\n                            title: 'No available titles',\r\n                            button: 'OK',\r\n                        })\r\n                    }\r\n                });\r\n            });\r\n        }).catch(() => {\r\n            swal({\r\n                title: 'Something went wrong!! Please try again later!!',\r\n                button: 'OK',\r\n            })\r\n        });\r\n    }\r\n\r\n    // to handle the search form submitting\r\n    handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        this.searchForMovies();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"movieSearchArea\">\r\n                <div className=\"wrapper\">\r\n                    <div className=\"movieSearchContainer\">\r\n                        {/* two conditions to load the search form 1) no results yet and 2) there is no keyword in the url comming from \"back to resullt\" link in \"MovieDetials\" */}\r\n                        {this.state.movies.length === 0 && typeof this.props.match.params.keyword == 'undefined' ?\r\n                            <div className=\"movieHead\">\r\n                                <h1>quick flick picker</h1>\r\n                                <form className=\"movieSearchForm\" action=\"\" onSubmit={this.handleSubmit}>\r\n                                    <label htmlFor=\"keywordInput\" className=\"visuallyHidden\">enter a keyword to search for a movie</label>\r\n                                    <input className=\"movieSearchBar\" type=\"text\" id=\"keywordInput\" required onChange={this.handleKeyword} value={this.state.keyword} placeholder=\"Search for a movie...\" />\r\n                                    <button className=\"watchMovieBtn movieSearchButton\" type=\"submit\">find movie</button>\r\n                                </form>\r\n                            </div>\r\n                            :\r\n                            <ul className=\"moviePosterContainer\">\r\n                                {\r\n                                    this.state.movies.map((movie) => {\r\n                                        return (\r\n                                            <li key={movie.id} className=\"moviePoster\">\r\n                                                <AddToLists movieId={movie.id} />\r\n                                                <Link key={movie.id} to={`/movies/${this.state.keyword}/ /${movie.id}`}>\r\n                                                    <img src={`http://image.tmdb.org/t/p/w500/${movie.poster_path}`} alt={movie.title} />\r\n                                                </Link>\r\n                                            </li>\r\n                                        )\r\n                                    })\r\n                                }\r\n                            </ul>\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default MovieSearch;\r\n","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport {Link} from 'react-router-dom';\r\nimport AddToLists from './AddToLists.js';\r\nimport GetMovieDetails from './GetMovieDetails.js';\r\nimport swal from 'sweetalert';\r\n\r\n\r\nclass MovieDetails extends Component {\r\n    constructor (){\r\n        super();\r\n        this.state = {\r\n            movieDetails: {},\r\n            movieGenre: [],\r\n            credits: {},\r\n            directors: [],\r\n            cast: [],\r\n            videoLink:'',\r\n            movieId:'',\r\n            keyword:'',\r\n            listName:'',\r\n        }\r\n\r\n        \r\n    }\r\n\r\n    componentDidMount = () => {\r\n        if (typeof this.props.match.params.keyword != 'undefined'){\r\n            const keyword = this.props.match.params.keyword;\r\n\r\n            if(keyword!==' ') {\r\n                this.setState({\r\n                    keyword: keyword,\r\n                });\r\n            }\r\n        }\r\n        if (typeof this.props.match.params.listName != 'undefined') {\r\n            const listName = this.props.match.params.listName;\r\n            if (listName !== ' ') {\r\n            this.setState({\r\n                listName: listName,\r\n            })\r\n        }\r\n        }\r\n        const movieId = this.props.match.params.movieID;\r\n        this.setState({\r\n            movieId:movieId,\r\n        })\r\n\r\n        // get cast and crew\r\n        axios({\r\n            url: `https://api.themoviedb.org/3/movie/${movieId}/credits`,\r\n            params: {\r\n                api_key: '8341ba99fae06408554c7e8411e4a4f9',\r\n            }\r\n        }).then(response => {\r\n            const  credits = response.data;\r\n\r\n            // if the job is directing, return to the new array\r\n            const director = credits.crew.filter((crew) => {\r\n              \r\n                    return(crew.job === 'Director');\r\n            })\r\n\r\n            // take only first 5 cast members\r\n            const cast = credits.cast.filter((castMember, index) => {\r\n                    return index <= 4; // small change\r\n            })\r\n            \r\n            // set state\r\n            this.setState({\r\n                directors: director,\r\n                cast: cast,\r\n            })\r\n        }).catch(()=>{\r\n            swal({\r\n                text: 'Something went wrong!! Please try again later!!',\r\n                button: 'OK',\r\n            })\r\n        });\r\n\r\n        // get video link\r\n        axios ({\r\n            url: `https://api.themoviedb.org/3/movie/${movieId}/videos`,\r\n            params: {\r\n                api_key: '8341ba99fae06408554c7e8411e4a4f9',\r\n            }\r\n        }).then(response => {\r\n            const videos = response.data;\r\n\r\n            // check if video results is undefined\r\n            if(videos.results[0] !== undefined){\r\n                // set state\r\n                this.setState({\r\n                    videoLink: `https://www.youtube.com/embed/${videos.results[0].key}`,\r\n                })\r\n\r\n                // if it is undefined, set state to null\r\n            } else {\r\n                this.setState({\r\n                    videoLink: null,\r\n                })\r\n            }\r\n        }).catch(() => {\r\n            swal({\r\n                text: 'Something went wrong!! Please try again later!!',\r\n                button: 'OK',\r\n            })\r\n        });\r\n\r\n    }\r\n\r\n    // call function to get movie details from other component\r\n    getMovieDetails = (movieDetails) => {\r\n        this.setState({\r\n            movieDetails: movieDetails,\r\n            movieGenre: movieDetails.genres,\r\n        })\r\n    }\r\n\r\n\r\n    // // on component did unmount set the state to false\r\n    // componentWillUnmount = () => {\r\n    //     this.setState({\r\n    //         isMounted: false,\r\n    //     })\r\n    // }\r\n\r\n    render(){    \r\n        return (\r\n            <section className=\"movieDetails\">\r\n                {/* if the state is mounted, include add to lists, if not make it null; this is to fix and error we were having */}\r\n                {this.state.movieId !=='' ? \r\n                <div className=\"addButton\">\r\n                    <AddToLists movieId={this.state.movieId} /> \r\n                    <GetMovieDetails movieDetails={this.getMovieDetails} movieID={this.state.movieId}/>\r\n                    </div>\r\n                : null} \r\n                {this.state.keyword!==''?\r\n                <Link className=\"goBack\"  to={`/quickFlickPicker25/${this.state.keyword}`}>Back to results</Link>\r\n            : null}\r\n                {this.state.listName !== '' ?\r\n                    <Link className=\"goBack\" to={`/watch-movie/${this.state.listName}`}>Watch A Different Movie</Link>\r\n                    : null}\r\n                <div className=\"detailsPage\">\r\n                    <div>\r\n                        <img src={`http://image.tmdb.org/t/p/w500/${this.state.movieDetails.poster_path}`} alt=\"\"/>\r\n                    </div>\r\n                    <div className=\"movieInfo\">\r\n                        <h1 className=\"detailTitle\">{this.state.movieDetails.title}</h1>\r\n                        <div className=\"threeDetails\">\r\n                            <div className=\"genres\">\r\n                                <h2>Genres</h2>\r\n                                {/* map through the genres, and display them */}\r\n                                {\r\n                                    this.state.movieGenre.map((genre, index) => {\r\n                                        return (\r\n                                            <p key={index}>{genre.name}</p>\r\n                                            )\r\n                                        })\r\n                                    }\r\n                            </div>\r\n                            <div className=\"director\">\r\n                                <h2>Director</h2>\r\n                                {/* map through the directors and display them */}\r\n                                {\r\n                                    this.state.directors.map((director)=>{\r\n                                        return(\r\n                                            <p key={director.credit_id}>{director.name}</p>\r\n                                            )\r\n                                        })\r\n                                    }\r\n                            </div>\r\n                            <div className=\"cast\">\r\n                                <h2>Cast</h2>\r\n                                {/* map through the cast members and display */}\r\n                                {\r\n                                    this.state.cast.map((actor)=>{\r\n                                        return(\r\n                                            <p key={actor.credit_id}>{actor.name}</p>\r\n                                            )\r\n                                        })\r\n                                    }\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"description\">\r\n                            <h2>Description</h2>\r\n                            <p>{this.state.movieDetails.overview}</p>\r\n                        </div>\r\n                        <div className=\"trailer\">\r\n                            {this.state.videoLink === null ? null : \r\n                            <a className=\"watchVideo\" target=\"_blank\" rel=\"noopener noreferrer\"  href={this.state.videoLink}>Watch Trailer</a>\r\n                            }   \r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </section>\r\n        )\r\n    }\r\n}\r\n\r\nexport default MovieDetails;","import React, { Component } from 'react';\r\nimport firebase from './firebase.js';\r\nimport './watchMovie.css';\r\nimport swal from 'sweetalert';\r\n\r\nclass WatchMovie extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            ListMovies: [],\r\n            listGenres: [],\r\n            selectedGenre: '',\r\n            selectedTime: '',\r\n            movieToWatch: '',\r\n\r\n        };\r\n\r\n    }\r\n\r\n    // to load all the genres in the list\r\n    getGenres = () => {\r\n        const genres = [];\r\n        this.state.ListMovies.forEach((movie) => {\r\n            movie.name.genre.forEach((genre) => {\r\n                genres.push(genre);\r\n            });\r\n        });\r\n        const uniqueGenres = genres.filter((genre, index) => genres.indexOf(genre) === index);\r\n        this.setState({\r\n            listGenres: uniqueGenres,\r\n        })\r\n    }\r\n\r\n    //to get all the movies in the list\r\n    componentDidMount() {\r\n        const dbRef = firebase.database().ref(this.props.listName);\r\n        const stateToBeSet = [];\r\n        dbRef.on('value', (response) => {\r\n            const dataFromDb = response.val();\r\n            for (let key in dataFromDb) {\r\n                if (dataFromDb[key] === this.props.listName) {\r\n                    continue;\r\n                }\r\n                const listInfo = {\r\n                    key: key,\r\n                    name: dataFromDb[key]\r\n                }\r\n                stateToBeSet.push(listInfo);\r\n            }\r\n            if (stateToBeSet.length !== 0) {\r\n                this.setState({\r\n                    ListMovies: stateToBeSet,\r\n                }, () => {\r\n                    this.getGenres();\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    //to handle searching for a movie in the list\r\n    handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        const genre = this.state.selectedGenre;\r\n        if (this.state.selectedTime !== '' && genre !== '') {\r\n            const movies = this.state.ListMovies;\r\n            const time = parseInt(this.state.selectedTime);\r\n            const qualifyingMovies = movies.filter((movie) => {\r\n                return (parseInt(movie.name.runtime) <= time && movie.name.genre.indexOf(genre) >= 0)\r\n            });\r\n            if (qualifyingMovies.length === 0) {\r\n                swal({\r\n                    title: 'No matches in this list',\r\n                    button: 'OK',\r\n                })\r\n            }\r\n            else {\r\n                //to generate a random index => random movie\r\n                const selectedIndex = Math.floor(Math.random() * qualifyingMovies.length);\r\n                this.setState({\r\n                    movieToWatch: qualifyingMovies[selectedIndex].name.id,\r\n                }, () => {\r\n                        this.props.history.push(`/movies/ /${this.props.listName}/${this.state.movieToWatch}`);\r\n                }\r\n                );\r\n            }\r\n        }\r\n        else if (genre === '') {\r\n            swal({\r\n                title: 'Please select a genre!',\r\n                button: 'OK',\r\n            })\r\n        }\r\n        else {\r\n            swal({\r\n                title: 'Please select a time!',\r\n                button: 'OK',\r\n            })\r\n        }\r\n    }\r\n\r\n    // to handle the changes of both Genre and time select elemnts\r\n    handleChange = (event) => {\r\n        const id = event.target.id;\r\n        const value = event.target.value;\r\n        this.setState({\r\n            [id]: value,\r\n        })\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <section className=\"watchMovie\">\r\n                <div className=\"wrapper\">\r\n                    <div className=\"watchMovieContainer\">\r\n                        <div className=\"watchMovieHead\">\r\n                            <h1>\r\n                                watch a movie\r\n                            </h1>\r\n                            <form action=\"\" onSubmit={this.handleSubmit}>\r\n                                <div className=\"genreTimeString\">\r\n                                    <div className=\"firstString\">\r\n                                        <p>I feel like watching a </p>\r\n                                        <select id=\"selectedGenre\" onChange={this.handleChange}>\r\n                                            <option value=\"\">genre</option>\r\n                                            {\r\n                                                this.state.listGenres.map((genre, index) => {\r\n                                                    return (\r\n                                                        <option value={genre} key={index} >{genre}</option>\r\n\r\n                                                    )\r\n                                                })\r\n                                            }\r\n                                        </select>\r\n                                    </div>\r\n\r\n                                    <div className=\"secondString\">           \r\n                                        <p> movie and I have </p>\r\n                                        <select id=\"selectedTime\" onChange={this.handleChange}>\r\n                                            <option value=\"\">amount of time</option>\r\n                                            <option value=\"90\">Less than 1.5 hours</option>\r\n                                            <option value=\"120\">Less than 2 hours</option>\r\n                                            <option value=\"240\">All the time in the world </option>\r\n                                        </select>\r\n                                    </div> \r\n                                </div>\r\n                                <button className=\"watchMovieBtn findMovieBtn\" type=\"submit\">find movie</button>\r\n                            </form>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </section>\r\n        )\r\n    }\r\n}\r\n\r\nexport default WatchMovie;","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport Lists from './Lists.js';\r\nimport MovieSearch from './MovieSearch.js';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Route,\r\n  Link\r\n} from 'react-router-dom';\r\nimport MovieDetails from './MovieDetails.js';\r\nimport WatchMovie from './WatchMovie.js';\r\nimport './movieSearchStyle.css';\r\nimport logo from './assets/qfpLogo.png';\r\n\r\nclass App extends Component {\r\n\r\n  constructor(){\r\n    super();\r\n\r\n    this.state = {\r\n      listsShown: true,\r\n    }\r\n  }\r\n\r\n  // if the window is 860 px then hide the lists by default\r\n  componentDidMount = () => {\r\n    if(window.innerWidth <= 840){\r\n      this.handleListsShow(false);\r\n    }\r\n  }\r\n\r\n\r\n\r\n// handles whether the list is shown or hidden\r\n  handleListsShow = (listState) => {\r\n    this.setState({\r\n      listsShown: listState,\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n        <Router>\r\n          <div className=\"App\">\r\n          <button className=\"showLists\" onClick={() => { this.handleListsShow(true) }}>\r\n            <i className=\"fas fa-list\"></i></button>\r\n          {\r\n            this.state.listsShown ? <Lists\r\n              hideListsFunc={this.handleListsShow} isHidden=\"false\" />\r\n              : <Lists\r\n                hideListsFunc={this.handleListsShow} isHidden=\"true\" />\r\n          }\r\n\r\n              <Route path=\"/quickFlickPicker25/:keyword?\"  component={MovieSearch} />\r\n              <Route path=\"/movies/:keyword?/:listName?/:movieID\"  component={MovieDetails} />\r\n              <Route\r\n                exact\r\n                path=\"/watch-movie/:listName\"\r\n                render={props => <WatchMovie listName={props.match.params.listName} key={props.match.params.listName}\r\n                history={props.history}  />}\r\n              />\r\n              {/* <div className=\"mainLogo\" >\r\n                <img src={logo} alt=\"\" />\r\n              </div> */}\r\n          <div className=\"logoAndSearch\" >\r\n            <a href=\"/quickFlickPicker25/\" title=\"Search Movies\"><i className=\"fas fa-search\"></i></a>\r\n            <div className=\"logoImg\">\r\n              <img src={logo} alt=\"\" />\r\n            </div>\r\n          </div>  \r\n          </div>\r\n        </Router>  \r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}