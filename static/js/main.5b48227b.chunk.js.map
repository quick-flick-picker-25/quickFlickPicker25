{"version":3,"sources":["firebase.js","Lists.js","GetMovieDetails.js","AddToLists.js","MovieSearch.js","MovieDetails.js","WatchMovie.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Lists","handleUserInput","e","setState","userListName","target","value","handleUserListName","preventDefault","state","usersList","find","list","key","alert","database","ref","push","handleDeleteList","listToDelete","window","confirm","dbRef","child","remove","handleReload","handleMovieName","object","stateToSet","movie","info","handleDeleteMovie","listName","movieObject","refKey","id","this","on","response","data","val","listData","className","action","onSubmit","htmlFor","onChange","required","type","placeholder","class","map","href","onClick","length","index","title","to","Component","GetMovieDetails","props","movieID","axios","url","params","api_key","then","movieDetails","catch","AddToLists","event","checkIfMovieExist","movieId","stateToBeSet","dataFromDb","indexOf","clickHandler","text","movieInfo","genres","genre","name","details","runtime","getMovieDetails","userLists","listInfo","aria-hidden","MovieSearch","handleKeyword","keyword","handleSubmit","moviesWithDetails","query","promises","results","Promise","all","filteredMovies","filter","poster_path","movies","src","alt","MovieDetails","componentDidMount","match","credits","director","crew","job","cast","castMember","directors","videos","undefined","videoLink","movieGenre","componentWillUnmount","isMounted","credit_id","actor","overview","rel","WatchMovie","getGenres","ListMovies","forEach","uniqueGenres","listGenres","getInfo","prop","selectedGenre","selectedTime","time","parseInt","qualifyingMovies","selectedIndex","Math","floor","random","movieToWatch","history","handleChange","nextProp","App","path","exact","component","Boolean","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"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","file":"static/js/main.5b48227b.chunk.js","sourcesContent":["// firebase.js\r\nimport firebase from 'firebase';\r\nimport 'firebase/database';\r\n\r\n\r\n\r\n  const firebaseConfig = {\r\n    apiKey: \"AIzaSyAmkko3XAdO0l3amrDc4VMBv9e0xuCfEbo\",\r\n    authDomain: \"quickflickpicker.firebaseapp.com\",\r\n    databaseURL: \"https://quickflickpicker.firebaseio.com\",\r\n    projectId: \"quickflickpicker\",\r\n    storageBucket: \"quickflickpicker.appspot.com\",\r\n    messagingSenderId: \"981312277648\",\r\n    appId: \"1:981312277648:web:489979be7011747edd9c15\"\r\n  };\r\n  // Initialize Firebase\r\n  firebase.initializeApp(firebaseConfig);\r\n\r\nexport default firebase;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React, { Component } from 'react';\r\nimport firebase from './firebase';\r\nimport {Link} from 'react-router-dom';\r\nimport './lists.css';\r\n\r\nclass Lists extends Component {\r\n    constructor () {\r\n        super ()\r\n        this.state = {\r\n            dbRef: firebase.database().ref(),\r\n            usersList: [],\r\n            userListName: '',\r\n        }\r\n    }\r\n\r\n    //Connect our state with firebase\r\n    componentDidMount () {\r\n        //on value change collect data\r\n        this.state.dbRef.on('value', (response) => {\r\n            const data = response.val();\r\n            //make empty array\r\n            const stateToSet = []\r\n            //loop through our data\r\n            for (let key in data) {\r\n                const listData = {\r\n                    key: key,\r\n                    info: data[key]\r\n                }\r\n                //push each piece of data to our empty array\r\n                stateToSet.push(listData);\r\n            }\r\n            //set state to our array\r\n            this.setState({\r\n                usersList: stateToSet,\r\n            }, \r\n            // ()=>{\r\n            //     this.props.updateParentListFunc(this.state.usersList);\r\n            // }\r\n            )\r\n        })\r\n    }\r\n\r\n    // logs the changes when user types into input\r\n    handleUserInput = (e)=>{\r\n        this.setState({\r\n            userListName: e.target.value,\r\n        });\r\n    }\r\n\r\n    // make a function that records the value of the user input\r\n    handleUserListName = (e) => {\r\n        // prevent default action\r\n        e.preventDefault();\r\n\r\n        // checks if already have list with name\r\n        const checkForSameName = this.state.usersList.find((list)=>{\r\n            return list.key === this.state.userListName;\r\n        })\r\n        \r\n        // check if the list is empty string\r\n        // if(this.state.userListName === \"\"){\r\n        //     alert(\"please enter a name for your list!\")\r\n        // } else //already done\r\n         if (checkForSameName){\r\n            alert(\"You already have a list with that name!\");\r\n        } else {\r\n            // create new reference point in database\r\n            const newList = firebase.database().ref(this.state.userListName);\r\n            // push the name on submit to create node in firebase\r\n            newList.push(this.state.userListName);\r\n        }\r\n\r\n        // set to empty string \r\n        this.setState({\r\n            userListName: '',\r\n        })\r\n\r\n    }\r\n\r\n    // make a function that deletes the specific list\r\n    handleDeleteList = (listToDelete) => {\r\n        // deletes the list\r\n        const response = window.confirm(`Are you sure you want to delete list:${listToDelete}?`);\r\n        if (response === true) {\r\n            this.state.dbRef.child(listToDelete).remove();\r\n        } \r\n    }\r\n\r\n    handleReload = (e) => {\r\n        e.preventDefault();\r\n    \r\n    }\r\n\r\n    handleMovieName = (object) => {\r\n        const stateToSet = [];\r\n        for(let movie in object.info) {\r\n            if (object.info[movie] === object.key) {\r\n                continue;\r\n            }\r\n            stateToSet.push(object.info[movie]);\r\n        }\r\n        return stateToSet;\r\n    }\r\n\r\n    handleDeleteMovie = (listName, movieObject) => {\r\n        // make empty variable to store the reference key in DB \r\n        let refKey;\r\n        // loop through and see if the id of the movie in DB matches the movie selected, make the reference key that specific movie\r\n        for (let movie in listName.info) {\r\n\r\n            if (listName.info[movie] === listName.key) {\r\n                continue;\r\n            }else if (listName.info[movie].id === movieObject.id) {\r\n                refKey = movie;\r\n            }\r\n        }\r\n        // console.log(refKey);\r\n        // make variable to get the reference point in the database\r\n        const reference = firebase.database().ref(listName.key);\r\n        // delete the movie with the speicifc key\r\n        reference.child(refKey).remove();\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"yourLists\">\r\n                <div className=\"wrapper\">\r\n                    <h2>Your Lists:</h2>\r\n                    <form className=\"listInput\" action=\"\" onSubmit={this.handleUserListName}>\r\n                        <label className=\"labelHidden\" htmlFor=\"listName\">Please enter a list name</label>\r\n                        <input onChange={this.handleUserInput} required type=\"text\" id=\"listName\" placeholder=\"New list name\" value={this.state.userListName}/>\r\n                        <button className=\"roundButton\" type=\"submit\"><i class=\"fas fa-plus\"></i></button>\r\n                    </form>\r\n                    <ul>\r\n                        {\r\n                            this.state.usersList.map((list)=>{\r\n                                return(\r\n                                    <li className=\"dropDownList\" key={list.key}>\r\n                                        <h3>{list.key}</h3>\r\n                                        <div className=\"movies\">\r\n                                            <a className=\"showMovies\" href=\"/\" onClick={this.handleReload}><i class=\"fas fa-chevron-down\"></i></a>\r\n                                            <ul className=\"moviesDisplayed\">\r\n                                                {\r\n                                                this.handleMovieName(list).length===0 ? \r\n                                                <li> No movies in this list</li>:\r\n                                                this.handleMovieName(list).map((movie, index) => {\r\n                                                    return (\r\n                                                        <li className=\"listItem\" key={index}>\r\n                                                            <p>{movie.title}</p>\r\n                                                            <button className=\"deleteButton\" onClick={() => { this.handleDeleteMovie(list, movie) }}>Delete</button>\r\n                                                        </li>\r\n                                                    )\r\n                                                })\r\n                                            }\r\n                                            </ul>\r\n                                        </div>\r\n                                        {this.handleMovieName(list).length !== 0 ? <Link to={`/watch-movie/${list.key}`}>Watch Movie</Link> \r\n                                     : null\r\n                                        }\r\n                                        <button onClick={() => { this.handleDeleteList(list.key) }}><i class=\"fas fa-trash-alt\"></i></button>\r\n                                    </li>\r\n                                )\r\n                            })\r\n                        }\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Lists; \r\n\r\n","import { Component } from 'react';\r\nimport axios from 'axios'\r\n\r\nclass GetMovieDetails extends Component {\r\n    componentDidMount(){\r\n        if(typeof this.props.movieID != \"undefined\"){\r\n                axios ({\r\n                    url: `https://api.themoviedb.org/3/movie/${this.props.movieID}`,\r\n                    params: {\r\n                        api_key: '8341ba99fae06408554c7e8411e4a4f9',\r\n                    }\r\n                }).then(response => {\r\n                    const movie = response.data;\r\n                    this.props.movieDetails(movie);\r\n                }).catch(() => {\r\n                    alert('Something went wrong!! Please try again later!!');\r\n                });\r\n        } \r\n    }\r\n\r\n    render() {\r\n        return(null);\r\n    }\r\n}\r\nexport default GetMovieDetails","import React, { Component } from 'react';\r\nimport firebase from './firebase.js';\r\nimport './addToLists.css';\r\nimport GetMovieDetails from './GetMovieDetails.js';\r\n\r\nclass AddToLists extends Component{\r\n    constructor(){\r\n        super();\r\n\r\n        this.state = {\r\n            userLists: [],\r\n            movieDetails: null,\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        const dbRef = firebase.database().ref();\r\n        dbRef.on('value', (response) => {\r\n            const dataFromDb = response.val();\r\n            const stateToBeSet =[];\r\n            for(let key in dataFromDb){\r\n                const listInfo ={\r\n                    key:key\r\n                }\r\n                stateToBeSet.push(listInfo)\r\n            }\r\n            this.setState({\r\n                userLists: stateToBeSet\r\n            })\r\n        })\r\n    }\r\n\r\n    handleReload = (event) =>{\r\n        event.preventDefault();\r\n    }\r\n    checkIfMovieExist =(dbRef, movieId) =>{\r\n        const stateToBeSet = [];\r\n        dbRef.on('value', (response) => {\r\n            const dataFromDb = response.val();\r\n            for (let key in dataFromDb) {\r\n                if (dataFromDb[key] === 'list 3') {\r\n                    continue;\r\n                }\r\n                stateToBeSet.push(dataFromDb[key].id)\r\n            }\r\n        });\r\n        if(stateToBeSet.indexOf(movieId)>-1) {\r\n            return true;\r\n        }\r\n        return false;\r\n\r\n    }\r\n    clickHandler = (event) => {\r\n        event.preventDefault();\r\n        const dbRef = firebase.database().ref(event.target.text);\r\n        const movieInfo = this.state.movieDetails;\r\n        if(this.checkIfMovieExist(dbRef, movieInfo.id))\r\n        {\r\n            alert('The movie is already in the list');\r\n        }\r\n        else {\r\n            const genres = movieInfo.genres.map((genre) => {\r\n                return genre.name\r\n            })\r\n            const details = {\r\n                id: movieInfo.id,\r\n                title: movieInfo.title,\r\n                runtime: movieInfo.runtime,\r\n                genre: genres\r\n            }\r\n            dbRef.push(details)\r\n        }\r\n    }\r\n\r\n    getMovieDetails = (movieDetails) => {\r\n        this.setState({\r\n            movieDetails: movieDetails,\r\n        })\r\n    }\r\n\r\n    render(){\r\n        const userLists = this.state.userLists;\r\n        return(\r\n            <div className=\"addToLists\">\r\n                <div className=\"listMenu\">   \r\n                    <a href=\"/\" onClick={this.handleReload}>\r\n                        <span aria-hidden=\"true\">&#43;</span>\r\n                    </a>\r\n                    <ul className=\"listSubMenu\">\r\n                        {userLists.map((list, index) => {\r\n                            return (\r\n                                <li key={index}>\r\n                                    <GetMovieDetails movieID={this.props.movieId} \r\n                                    movieDetails={this.getMovieDetails} />\r\n                                    <a href=\"/\" onClick={this.clickHandler}>{list.key}</a>\r\n                                </li>\r\n                            )\r\n                        })}\r\n                    </ul>\r\n                </div> \r\n            </div>\r\n        )}\r\n}\r\n\r\nexport default AddToLists;","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport AddToLists from './AddToLists.js';\r\nimport './addToLists.css';\r\nimport {Link} from 'react-router-dom';\r\n\r\nclass MovieSearch extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            keyword: '',\r\n            movies: [],\r\n        }\r\n    }\r\n    handleKeyword = (event) => {\r\n        this.setState({\r\n            keyword: event.target.value,\r\n        })\r\n    }\r\n    handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        let moviesWithDetails = [];\r\n        axios({\r\n            url: 'https://api.themoviedb.org/3/search/movie',\r\n            params: {\r\n                api_key: '8341ba99fae06408554c7e8411e4a4f9',\r\n                query: this.state.keyword,\r\n            }\r\n        }).then((response) => {\r\n            const movies = response.data.results;\r\n            const promises= movies.map((movie) => {\r\n               return axios ({\r\n                url: `https://api.themoviedb.org/3/movie/${movie.id}`,\r\n                params: {\r\n                    api_key: '8341ba99fae06408554c7e8411e4a4f9',\r\n                }\r\n            }).then(response => {\r\n                const movieDetails = response.data;\r\n               moviesWithDetails.push(movieDetails);\r\n            });\r\n        });\r\n            Promise.all(promises).then(() => {\r\n                const filteredMovies= moviesWithDetails.filter((movie)=>{\r\n                        return (movie.poster_path != null && movie.genres.length>0 && movie.runtime !==null)\r\n                   });\r\n                this.setState({\r\n                    movies: filteredMovies,\r\n                }, () => {\r\n                    if (this.state.movies.length === 0) {\r\n                        alert('No available titles');\r\n                    }\r\n                }).catch(() => {\r\n                    alert('Something went wrong!! Please try again later!!');\r\n                });\r\n            });       \r\n        }).catch(() => {\r\n            alert('Something went wrong!! Please try again later!!');\r\n        });\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                {this.state.movies.length === 0 ?\r\n                    <div>\r\n                        <h1>quick flick picker</h1>\r\n                        <form action=\"\" onSubmit={this.handleSubmit}>\r\n                            <label htmlFor=\"keywordInput\" className=\"visuallyHidden\">enter a keyword to search for a movie</label>\r\n                            <input type=\"text\" id=\"keywordInput\" required onChange={this.handleKeyword} value={this.state.keyword} placeholder=\"Search for a movie...\" />\r\n                            <button type=\"submit\">find movie</button>\r\n                        </form>\r\n                    </div>\r\n                    :\r\n                    <ul>\r\n                        {\r\n                            this.state.movies.map((movie) => {\r\n                                return (\r\n                                    <li key={movie.id} className=\"moviePoster\">\r\n                                    <AddToLists movieId={movie.id}/> \r\n                                        <Link key={movie.id} to={`/movies/${movie.id}`}>\r\n                                         <img src={`http://image.tmdb.org/t/p/w500/${movie.poster_path}`} alt={movie.title} />   \r\n                                        </Link>\r\n                                    </li>\r\n                                )\r\n                            })\r\n                        }\r\n                    </ul>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default MovieSearch;\r\n","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport {Link} from 'react-router-dom';\r\nimport AddToLists from './AddToLists.js';\r\nimport GetMovieDetails from './GetMovieDetails.js';\r\n\r\nclass MovieDetails extends Component {\r\n    constructor (){\r\n        super();\r\n        this.state = {\r\n            movieDetails: {},\r\n            movieGenre: [],\r\n            credits: {},\r\n            directors: [],\r\n            cast: [],\r\n            videoLink:'',\r\n            movieId:'',\r\n        }\r\n\r\n        \r\n    }\r\n\r\n    componentDidMount = () => {\r\n        // let movieId;\r\n        // if (typeof this.props.movieId =='undefined'){\r\n           const movieId = this.props.match.params.movieID;\r\n        // }\r\n        // else {\r\n        //     movieId = this.props.movieId;\r\n        // }\r\n\r\n\r\n        // on component did mount, set mounted to true\r\n        this.setState({\r\n            movieId:movieId,\r\n            \r\n        })\r\n\r\n        // get cast and crew\r\n        axios({\r\n            url: `https://api.themoviedb.org/3/movie/${movieId}/credits`,\r\n            params: {\r\n                api_key: '8341ba99fae06408554c7e8411e4a4f9',\r\n            }\r\n        }).then(response => {\r\n            const  credits = response.data;\r\n\r\n            // if the job is directing, return to the new array\r\n            const director = credits.crew.filter((crew) => {\r\n              \r\n                    return(crew.job === 'Director');\r\n            })\r\n\r\n            // take only first 5 cast members\r\n            const cast = credits.cast.filter((castMember, index) => {\r\n                    return index <= 4; // small change\r\n            })\r\n            \r\n            // set state\r\n            this.setState({\r\n                directors: director,\r\n                cast: cast,\r\n            })\r\n        }).catch(()=>{\r\n            alert('Something went wrong!! Please try again later!!');\r\n        });\r\n\r\n        // get video link\r\n        axios ({\r\n            url: `https://api.themoviedb.org/3/movie/${movieId}/videos`,\r\n            params: {\r\n                api_key: '8341ba99fae06408554c7e8411e4a4f9',\r\n            }\r\n        }).then(response => {\r\n            const videos = response.data;\r\n\r\n            // check if video results is undefined\r\n            if(videos.results[0] !== undefined){\r\n                // set state\r\n                this.setState({\r\n                    videoLink: `https://www.youtube.com/embed/${videos.results[0].key}`,\r\n                })\r\n\r\n                // if it is undefined, set state to null\r\n            } else {\r\n                this.setState({\r\n                    videoLink: null,\r\n                })\r\n            }\r\n        }).catch(() => {\r\n            alert('Something went wrong!! Please try again later!!');\r\n        });\r\n\r\n    }\r\n\r\n    // call function to get movie details from other component\r\n    getMovieDetails = (movieDetails) => {\r\n        this.setState({\r\n            movieDetails: movieDetails,\r\n            movieGenre: movieDetails.genres,\r\n        })\r\n    }\r\n\r\n\r\n\r\n    // on component did unmount set the state to false\r\n    componentWillUnmount = () => {\r\n        this.setState({\r\n            isMounted: false,\r\n        })\r\n    }\r\n\r\n    render(){    \r\n        return (\r\n            <section className=\"movieDetails\">\r\n                {/* if the state is mounted, include add to lists, if not make it null; this is to fix and error we were having */}\r\n                {this.state.movieId !=='' ? \r\n                <div>\r\n                        <AddToLists movieId={this.state.movieId} /> \r\n                 <GetMovieDetails movieDetails={this.getMovieDetails} movieID={this.state.movieId}/>\r\n                    </div>\r\n                : null} \r\n                <Link to=\"/\">Back to results</Link>\r\n                <div>\r\n                    <img src={`http://image.tmdb.org/t/p/w500/${this.state.movieDetails.poster_path}`} alt=\"\"/>\r\n                </div>\r\n\r\n                <div>\r\n                    <h1>{this.state.movieDetails.title}</h1>\r\n                    <div className=\"genres\">\r\n                        <h2>Genres</h2>\r\n                        {/* map through the genres, and display them */}\r\n                        {\r\n                            this.state.movieGenre.map((genre, index) => {\r\n                                return (\r\n                                    <p key={index}>{genre.name}</p>\r\n                                )\r\n                            })\r\n                        }\r\n                    </div>\r\n                    <div className=\"director\">\r\n                        <h2>Director</h2>\r\n                        {/* map through the directors and display them */}\r\n                        {\r\n                            this.state.directors.map((director)=>{\r\n                                return(\r\n                                    <p key={director.credit_id}>{director.name}</p>\r\n                                )\r\n                            })\r\n                        }\r\n                    </div>\r\n                    <div className=\"cast\">\r\n                        <h2>Cast</h2>\r\n                        {/* map through the cast members and display */}\r\n                        {\r\n                            this.state.cast.map((actor)=>{\r\n                                return(\r\n                                    <p key={actor.credit_id}>{actor.name}</p>\r\n                                )\r\n                            })\r\n                        }\r\n                    </div>\r\n                </div>\r\n                <div className=\"description\">\r\n                    <h2>Description</h2>\r\n                    <p>{this.state.movieDetails.overview}</p>\r\n                </div>\r\n                {this.state.videoLink === null ? null : \r\n                    <a className=\"watchVideo\" target=\"_blank\" rel=\"noopener noreferrer\"  href={this.state.videoLink}>Watch Trailer</a>\r\n                }\r\n            </section>\r\n        )\r\n    }\r\n}\r\n\r\nexport default MovieDetails;","import React, { Component } from 'react';\r\nimport firebase from './firebase.js';\r\n\r\nclass WatchMovie extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state={\r\n            ListMovies: [],\r\n            listGenres:[],\r\n            selectedGenre:'',\r\n            selectedTime:'',\r\n            movieToWatch:'',\r\n        };\r\n        \r\n    }\r\ngetGenres=()=>{\r\n    const genres = [];\r\n    this.state.ListMovies.forEach((movie) => {\r\n        movie.name.genre.forEach((genre) => {\r\n            genres.push(genre);\r\n        });\r\n    });\r\n    const uniqueGenres = genres.filter((genre, index) => genres.indexOf(genre) === index);\r\n    this.setState({\r\n        listGenres: uniqueGenres,\r\n    })  \r\n}\r\n\r\ngetInfo=(prop)=>{\r\n    const dbRef = firebase.database().ref(prop.match.params.listName);\r\n    const stateToBeSet = [];\r\n    dbRef.on('value', (response) => {\r\n        const dataFromDb = response.val();\r\n        for (let key in dataFromDb) {\r\n            if (dataFromDb[key] === prop.match.params.listName) {\r\n                continue;\r\n            }\r\n            const listInfo = {\r\n                key: key,\r\n                name: dataFromDb[key]\r\n\r\n            }\r\n            stateToBeSet.push(listInfo)\r\n        }\r\n        this.setState({\r\n            ListMovies: stateToBeSet\r\n        }, () => {\r\n            this.getGenres();\r\n\r\n        });\r\n    });\r\n}\r\n    UNSAFE_componentWillReceiveProps(nextProp){\r\n      this.getInfo(nextProp);\r\n    }\r\n    componentDidMount() {\r\n        this.getInfo(this.props);\r\n        // const {specificList} = this.props.location.state;\r\n        \r\n        // const dbRef = firebase.database().ref(this.props.specificList);\r\n     \r\n    }\r\n\r\n\r\n    handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        \r\n        const genre=this.state.selectedGenre;\r\n        if (this.state.selectedTime !==''  && genre !== ''){\r\n            const movies=this.state.ListMovies;\r\n            const time = parseInt(this.state.selectedTime);\r\n            const  qualifyingMovies=movies.filter((movie)=>{\r\n            return (parseInt(movie.name.runtime) <= time && movie.name.genre.indexOf(genre)>=0) \r\n        });\r\n        if (qualifyingMovies.length === 0){\r\n            alert(\"No matches in this list.\")\r\n        }else{\r\n            const selectedIndex=Math.floor(Math.random()*qualifyingMovies.length);\r\n        \r\n       this.setState({\r\n           movieToWatch: qualifyingMovies[selectedIndex].name.id,\r\n       },()=>{\r\n               this.props.history.push(`/movies/${this.state.movieToWatch}`);\r\n       }\r\n       );\r\n            \r\n        }\r\n    }\r\n       else if(genre === '') {\r\n           alert(\"Please select a genre!\");\r\n       }\r\n       else {\r\n            alert(\"Please select a time!\");\r\n       }\r\n\r\n    }\r\n    handleChange= (event) => {\r\n        const id=event.target.id;\r\n        const value = event.target.value;\r\n        this.setState({\r\n            [id]:value,\r\n        })\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n        //   this.state.movieToWatch==='' ?\r\n              <section>\r\n                  <h1>\r\n                      watch a movie\r\n                </h1>\r\n                  <form action=\"\" onSubmit={this.handleSubmit}>\r\n                      <p>I feel like watching a </p>\r\n                      <select id=\"selectedGenre\" onChange={this.handleChange}>\r\n                          <option value=\"\">Select a genre</option>\r\n                          {\r\n                              this.state.listGenres.map((genre, index) => {\r\n                                  return (\r\n                                      <option value={genre} key={index} >{genre}</option>\r\n\r\n                                  )\r\n                              })\r\n                          }\r\n                      </select>\r\n                      <p> movie and I have </p>\r\n                      <select id=\"selectedTime\" onChange={this.handleChange}>\r\n                          <option value=\"\">Select a movie length</option>\r\n                          <option value=\"90\">Less than 1.5 hours</option>\r\n                          <option value=\"120\">Less than 2 hours</option>\r\n                          <option value=\"240\">All the time in the world </option>\r\n                      </select>\r\n                      <button type=\"submit\">find movie</button>\r\n\r\n                  </form>\r\n              </section>\r\n            // :\r\n                \r\n            // <MovieDetails movieId={this.state.movieToWatch} />  \r\n        )\r\n    }\r\n}\r\n\r\nexport default WatchMovie;","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport Lists from './Lists.js';\r\nimport MovieSearch from './MovieSearch.js';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Route\r\n} from 'react-router-dom';\r\nimport MovieDetails from './MovieDetails.js';\r\nimport WatchMovie from './WatchMovie.js';\r\n\r\nclass App extends Component {\r\n\r\n  // constructor(){\r\n  //   super();\r\n\r\n  //   this.state = {\r\n  //     userLists: [],\r\n  //     specificList: '',\r\n  //   }\r\n  // }\r\n\r\n  // make a function to update state globally (in parent)\r\n  // handleGetLists = (lists) => {\r\n  //   // update own state with one from child component\r\n  //   this.setState({\r\n  //     userLists: lists,\r\n  //   })\r\n  // }\r\n\r\n  // make a function to update the list that will be filtered through\r\n  // handleGetSpecificList = (listName) => {\r\n  //   console.log(listName.key);\r\n  //   this.setState({\r\n  //     specificList: listName.key,\r\n  //   })\r\n  // }\r\n\r\n  render() {\r\n    return (\r\n    <Router>\r\n      <div className=\"App\">\r\n        <Lists \r\n        // updateParentListFunc = {this.handleGetLists} \r\n        // updateSpecificListFunc={this.handleGetSpecificList}\r\n        />\r\n          <Route path=\"/\" exact component={MovieSearch} />\r\n          <Route path=\"/movies/:movieID\" exact component={MovieDetails} />\r\n          <Route path=\"/watch-movie/:listName\" exact component={WatchMovie} key={this.props.match.params.listName}/>\r\n            {/* <Route path=\"./watch-movie/:listName\" exact component={WatchMovie} /> */}\r\n          {/* <Route paWatchMovie specificList ={this.state.specificList}/> */}\r\n        {/* <Route path=\"/watch-movie/\" render={()=><WatchMovie listName={this.state.specificList}/>} /> */}\r\n      </div>\r\n    </Router>  \r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}