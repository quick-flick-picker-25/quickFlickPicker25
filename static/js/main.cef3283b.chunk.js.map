{"version":3,"sources":["assets/qfpLogo.png","firebase.js","Lists.js","GetMovieDetails.js","AddToLists.js","MovieSearch.js","MovieDetails.js","WatchMovie.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Lists","handleUserInput","e","setState","userListName","target","value","handleUserListName","preventDefault","state","usersList","find","list","key","swal","title","text","button","database","ref","push","handleDeleteList","listToDelete","buttons","dangerMode","then","willDelete","dbRef","child","remove","handleMovieName","object","stateToSet","movie","info","handleDeleteMovie","listName","movieObject","refKey","id","handleEnter","handleMovieList","currentTarget","close","querySelector","open","movieList","parentNode","nextElementSibling","classList","toggle","hideLists","event","this","on","response","data","val","listData","className","props","isHidden","action","onSubmit","htmlFor","onChange","required","type","placeholder","map","tabIndex","onKeyDown","onClick","length","index","to","Component","GetMovieDetails","movieID","axios","url","params","api_key","movieDetails","catch","AddToLists","handleReload","checkIfMovieExist","movieId","stateToBeSet","dataFromDb","indexOf","clickHandler","movieInfo","genres","genre","name","details","runtime","getMovieDetails","userLists","listInfo","href","aria-hidden","MovieSearch","handleKeyword","keyword","searchForMovies","moviesWithDetails","query","promises","results","a","Promise","all","filteredMovies","filter","poster_path","movies","handleSubmit","match","src","alt","MovieDetails","componentDidMount","credits","director","crew","job","cast","castMember","directors","videos","undefined","videoLink","movieGenre","credit_id","actor","overview","rel","WatchMovie","getGenres","ListMovies","forEach","uniqueGenres","listGenres","selectedGenre","selectedTime","time","parseInt","qualifyingMovies","selectedIndex","Math","floor","random","movieToWatch","history","handleChange","App","changeIcon","tagName","parentElement","autoComplete","path","component","exact","render","logo","Boolean","window","location","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"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","file":"static/js/main.cef3283b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/qfpLogo.48b3d236.png\";","// firebase.js\r\nimport firebase from 'firebase';\r\nimport 'firebase/database';\r\n\r\n\r\n\r\n  const firebaseConfig = {\r\n    apiKey: \"AIzaSyAmkko3XAdO0l3amrDc4VMBv9e0xuCfEbo\",\r\n    authDomain: \"quickflickpicker.firebaseapp.com\",\r\n    databaseURL: \"https://quickflickpicker.firebaseio.com\",\r\n    projectId: \"quickflickpicker\",\r\n    storageBucket: \"quickflickpicker.appspot.com\",\r\n    messagingSenderId: \"981312277648\",\r\n    appId: \"1:981312277648:web:489979be7011747edd9c15\"\r\n  };\r\n  // Initialize Firebase\r\n  firebase.initializeApp(firebaseConfig);\r\n\r\nexport default firebase;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React, { Component } from 'react';\r\nimport firebase from './firebase';\r\nimport {Link} from 'react-router-dom';\r\nimport swal from 'sweetalert';\r\n\r\nclass Lists extends Component {\r\n    constructor () {\r\n        super ()\r\n        this.state = {\r\n            dbRef: firebase.database().ref(),\r\n            usersList: [],\r\n            userListName: '',\r\n        }\r\n    }\r\n\r\n    //Connect our state with firebase\r\n    componentDidMount () {\r\n        //on value change collect data\r\n        this.state.dbRef.on('value', (response) => {\r\n            const data = response.val();\r\n            //make empty array\r\n            const stateToSet = [];\r\n            //loop through our data\r\n            for (let key in data) {\r\n                const listData = {\r\n                    key: key,\r\n                    info: data[key],\r\n                }\r\n                //push each piece of data to our empty array\r\n                stateToSet.push(listData);\r\n            }\r\n            //set state to our array\r\n            this.setState({\r\n                usersList: stateToSet,\r\n            })\r\n        })\r\n    }\r\n\r\n    // logs the changes when user types into input\r\n    handleUserInput = (e)=>{\r\n        this.setState({\r\n            userListName: e.target.value,\r\n        });\r\n    }\r\n\r\n    // make a function that records the value of the user input\r\n    handleUserListName = (e) => {\r\n        // prevent default action\r\n        e.preventDefault();\r\n\r\n        // checks if already have list with name\r\n        const checkForSameName = this.state.usersList.find((list)=>{\r\n            return list.key === this.state.userListName;\r\n        })\r\n        \r\n        // check if the name is already existing\r\n         if (checkForSameName){\r\n            swal({\r\n                title: 'You already have a list with that name!',\r\n                text: 'Please create a unique name for your list',\r\n                button: 'OK',\r\n            })\r\n        } else {\r\n            // create new reference point in database\r\n            const newList = firebase.database().ref(this.state.userListName);\r\n            // push the name on submit to create node in firebase\r\n            newList.push(this.state.userListName);\r\n        }\r\n\r\n        // set to empty string \r\n        this.setState({\r\n            userListName: '',\r\n        })\r\n\r\n    }\r\n\r\n    // make a function that deletes the specific list\r\n    handleDeleteList = (listToDelete) => {\r\n        // deletes the list\r\n        swal({\r\n            title: `Are you sure you want to delete the list: ${listToDelete}?`,\r\n            buttons: [\"Cancel\", \"Yes please\"],\r\n            dangerMode: true,\r\n        })\r\n        .then((willDelete) => {\r\n            if (willDelete) {\r\n                swal({\r\n                    title: `Your list was deleted!`,\r\n                })\r\n              this.state.dbRef.child(listToDelete).remove();\r\n            }\r\n          });\r\n    }\r\n\r\n\r\n    handleMovieName = (object) => {\r\n        const stateToSet = [];\r\n        for(let movie in object.info) {\r\n            if (object.info[movie] === object.key) {\r\n                continue;\r\n            }\r\n            stateToSet.push(object.info[movie]);\r\n        }\r\n        return stateToSet;\r\n    }\r\n\r\n    handleDeleteMovie = (listName, movieObject) => {\r\n        swal({\r\n            title: `Are you sure you want to delete the movie: ${movieObject.title} from the list: ${listName.key}?`,\r\n            buttons: [\"Cancel\", \"Yes please\"],\r\n            dangerMode: true,\r\n        })\r\n        .then((willDelete) => {\r\n            if (willDelete) {\r\n            // make empty variable to store the reference key in DB \r\n            let refKey;\r\n            // loop through and see if the id of the movie in DB matches the movie selected, make the reference key that specific movie\r\n            for (let movie in listName.info) {\r\n\r\n                if (listName.info[movie] === listName.key) {\r\n                    continue;\r\n                } else if (listName.info[movie].id === movieObject.id) {\r\n                    refKey = movie;\r\n                }\r\n            }\r\n            // make variable to get the reference point in the database\r\n            const reference = firebase.database().ref(listName.key);\r\n            // delete the movie with the specifc key\r\n            reference.child(refKey).remove();\r\n            }\r\n        }); \r\n    }\r\n\r\n    handleEnter =(e)=>{\r\n        if (e.key === 'Enter') {\r\n            this.handleMovieList(e);\r\n        }\r\n\r\n\r\n    }\r\n    handleMovieList = (e) => {\r\n        //Get variable for button\r\n        const button = e.currentTarget;\r\n\r\n            //Make variables for close and open chevrons.\r\n            const close = button.querySelector(\".closeMovies\");\r\n            const open = button.querySelector(\".showMovies\");\r\n    \r\n            //Get variable for movies list by selecting parent and then next sibling.\r\n            const movieList = button.parentNode.nextElementSibling;\r\n            //In case lists are loading make sure the the movie list element is not null, so it will not break the code.\r\n            if(movieList !== null){\r\n                movieList.classList.toggle(\"activeMovieList\");\r\n            }\r\n    \r\n            //Hide Close/Hide Open\r\n            close.classList.toggle(\"changeClose\");\r\n            open.classList.toggle(\"changeClose\");\r\n\r\n    }\r\n\r\nhideLists =(event)=>{\r\n    event.preventDefault();\r\n}\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"yourLists\" id={this.props.isHidden}>\r\n                <div className=\"wrapper\">\r\n                    <div className=\"asideContainer\">\r\n                        <h2>Your Lists:</h2>\r\n                        <form className=\"listInput\" action=\"\" onSubmit={this.handleUserListName}>\r\n                            <div className=\"listInputContainer\">\r\n                                <label className=\"visuallyHidden\" htmlFor=\"listName\">Please enter a list name</label>\r\n                                <input onChange={this.handleUserInput} required type=\"text\" id=\"listName\" placeholder=\"New list name\" value={this.state.userListName}/>\r\n                            </div>\r\n                            <div className=\"submitButtonContainer\">\r\n                                <button className=\"roundButton\" type=\"submit\" title=\"Create a new list\"><i className=\"fas fa-plus\"></i></button>\r\n                            </div>\r\n                        </form>\r\n                    </div>\r\n            \r\n                    <ul className=\"movieListContainer\">\r\n                        {\r\n                            this.state.usersList.map((list)=>{\r\n                                return(\r\n                                    <li className=\"movieList\" key={list.key} >\r\n                                        <div className=\"dropDownContainer\">\r\n                                            <div className=\"dropDownButton\" tabIndex=\"0\" onKeyDown={this.handleEnter} onClick={this.handleMovieList}>\r\n                                                <h3>{list.key}</h3>\r\n                                                <p className=\"showMovies\" title=\"Open list\"><i className=\"fas fa-chevron-down\"></i></p>\r\n                                                <p className=\"closeMovies changeClose\" title=\"Close list\"><i className=\"fas fa-times\"></i></p>\r\n                                            </div>\r\n                                            <button onClick={() => { this.handleDeleteList(list.key) }} className=\"deleteListButton\" title=\"Delete list\"><i className=\"fas fa-trash-alt\"></i></button>\r\n                                        </div>\r\n                                        <div className=\"movies\">\r\n                                            <ul className=\"moviesDisplayed\">\r\n                                                {\r\n                                                this.handleMovieName(list).length===0 ? \r\n                                                <li className=\"noMoviesText\"> No movies in this list</li>:\r\n                                                this.handleMovieName(list).map((movie, index) => {\r\n                                                    return (\r\n                                                        <li className=\"listItem\" key={index}>\r\n                                                            <p>{movie.title}</p>\r\n                                                            <button className=\"deleteButton\" onClick={() => { this.handleDeleteMovie(list, movie) }} title=\"Delete movie\"><i className=\"fas fa-trash-alt\"></i></button>\r\n                                                        </li>\r\n                                                    )\r\n                                                })\r\n                                            }\r\n                                            </ul>\r\n                                            <div className=\"linkContainer\">\r\n                                                {this.handleMovieName(list).length !== 0 ? <Link className=\"watchMovieBtn\" to={`/watch-movie/${list.key}`}>Watch Movie</Link>\r\n                                                    : null\r\n                                                }\r\n\r\n\r\n                                            </div>\r\n                                        </div>\r\n                                    </li>\r\n                                )\r\n                            })\r\n                        }\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Lists; \r\n\r\n","import { Component } from 'react';\r\nimport axios from 'axios';\r\nimport swal from 'sweetalert';\r\n\r\n// this component is used only to get the movie details by passing the movie id \r\n// this component is created for reusabilty purpose and it does not returen any visual items\r\nclass GetMovieDetails extends Component {\r\n    componentDidMount(){\r\n        if(typeof this.props.movieID != \"undefined\"){\r\n                axios ({\r\n                    url: `https://api.themoviedb.org/3/movie/${this.props.movieID}`,\r\n                    params: {\r\n                        api_key: '8341ba99fae06408554c7e8411e4a4f9',\r\n                    }\r\n                }).then(response => {\r\n                    const movie = response.data;\r\n                    this.props.movieDetails(movie);\r\n                }).catch(() => {\r\n                    swal({\r\n                        title: 'Something went wrong!! Please try again later!!',\r\n                        button: 'OK',\r\n                    }) \r\n                });\r\n        } \r\n    }\r\n\r\n    render() {\r\n        return(null);\r\n    }\r\n}\r\nexport default GetMovieDetails","import React, { Component } from 'react';\r\nimport firebase from './firebase.js';\r\nimport GetMovieDetails from './GetMovieDetails.js';\r\nimport swal from 'sweetalert';\r\n\r\nclass AddToLists extends Component {\r\n\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            userLists: [],\r\n            movieDetails: null,\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        // fetch all the lists from the database\r\n        const dbRef = firebase.database().ref();\r\n        dbRef.on('value', (response) => {\r\n            const dataFromDb = response.val();\r\n            const stateToBeSet = [];\r\n            for (let key in dataFromDb) {\r\n                const listInfo = {\r\n                    key: key,\r\n                }\r\n                stateToBeSet.push(listInfo);\r\n            }\r\n            this.setState({\r\n                userLists: stateToBeSet,\r\n            })\r\n        })\r\n    }\r\n    //to prevent the \"+\" from reloading\r\n    handleReload = (event) => {\r\n        event.preventDefault();\r\n    }\r\n\r\n    // a function to check if the movie is already in the list\r\n    checkIfMovieExist = (listName, movieId) => {\r\n        const stateToBeSet = [];\r\n        const dbRef = firebase.database().ref(listName);\r\n        dbRef.on('value', (response) => {\r\n            const dataFromDb = response.val();\r\n            for (let key in dataFromDb) {\r\n                if (dataFromDb[key] === listName) {\r\n                    continue;\r\n                }\r\n                stateToBeSet.push(dataFromDb[key].id);\r\n            }\r\n        });\r\n        if (stateToBeSet.indexOf(movieId) > -1) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    // to handle the click on the list name (add the movie to the list)\r\n    clickHandler = (event, listName) => {\r\n        event.preventDefault();\r\n        const dbRef = firebase.database().ref(listName);\r\n        const movieInfo = this.state.movieDetails;\r\n        if (this.checkIfMovieExist(listName, movieInfo.id)) {\r\n            swal({\r\n                title: 'The movie is already in the list!',\r\n                button: 'OK',\r\n            })\r\n        }\r\n        else {\r\n            //adding the movie to the list\r\n            const genres = movieInfo.genres.map((genre) => {\r\n                return genre.name\r\n            })\r\n            const details = {\r\n                id: movieInfo.id,\r\n                title: movieInfo.title,\r\n                runtime: movieInfo.runtime,\r\n                genre: genres\r\n            }\r\n            dbRef.push(details);\r\n            swal({\r\n                title: 'The movie has been added to the list successfully!',\r\n                button: 'OK',\r\n            })\r\n        }\r\n    }\r\n\r\n    // this function is used to pass props from a child component (GetMovieDetails) to this component\r\n    getMovieDetails = (movieDetails) => {\r\n        this.setState({\r\n            movieDetails: movieDetails,\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const userLists = this.state.userLists;\r\n        return (\r\n            <div className=\"addToLists\">\r\n                <div className=\"listMenu\">\r\n                    <a href=\"/\" onClick={this.handleReload} className=\"roundButton\" >\r\n                        <span aria-hidden=\"true\" >&#43;</span>\r\n                    </a>\r\n                    <ul className=\"listSubMenu moviesDisplayed\">\r\n                        {userLists.map((list, index) => {\r\n                            return (\r\n                                <li key={index} className=\"listItem\" onClick={(event) => { this.clickHandler(event, list.key) }}>\r\n                                    <GetMovieDetails movieID={this.props.movieId}\r\n                                        movieDetails={this.getMovieDetails} />\r\n                                    <a href=\"/\" className=\"listLinks\" >{list.key}</a>\r\n                                </li>\r\n                            )\r\n                        })}\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default AddToLists;","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport AddToLists from './AddToLists.js';\r\nimport { Link } from 'react-router-dom';\r\nimport swal from 'sweetalert';\r\n\r\nclass MovieSearch extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            keyword: '',\r\n            movies: [],\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        // to check if the keyword is passed in the URL and this will happen only if the user clicks on \"back to result link\"\r\n        if (typeof this.props.match.params.keyword != 'undefined') {\r\n            const keyword = this.props.match.params.keyword;\r\n            this.setState({\r\n                keyword: keyword,\r\n            }, () => {\r\n                this.searchForMovies();\r\n            });\r\n        }\r\n    }\r\n\r\n    // to handle the changes of the keyword textbox\r\n    handleKeyword = (event) => {\r\n        this.setState({\r\n            keyword: event.target.value,\r\n        })\r\n    }\r\n\r\n    //to search for movies by a keyword in the api\r\n    searchForMovies = () => {\r\n        let moviesWithDetails = [];\r\n        axios({\r\n            url: 'https://api.themoviedb.org/3/search/movie',\r\n            params: {\r\n                api_key: '8341ba99fae06408554c7e8411e4a4f9',\r\n                query: this.state.keyword,\r\n            }\r\n        }).then((response) => {\r\n            const movies = response.data.results;\r\n            const promises = movies.map(async (movie) => {\r\n                //to get the details for each movie \r\n                // we needed to do this beacuse the previous api call doesn't return the runtime of the movie\r\n                const response = await axios({\r\n                    url: `https://api.themoviedb.org/3/movie/${movie.id}`,\r\n                    params: {\r\n                        api_key: '8341ba99fae06408554c7e8411e4a4f9',\r\n                    }\r\n                });\r\n                const movieDetails = response.data;\r\n                moviesWithDetails.push(movieDetails);\r\n            });\r\n            Promise.all(promises).then(() => {\r\n                const filteredMovies = moviesWithDetails.filter((movie) => {\r\n                    //return only the movies with genre, poster and runtime\r\n                    return (movie.poster_path != null && movie.genres.length > 0 && movie.runtime !== null)\r\n                });\r\n                this.setState({\r\n                    movies: filteredMovies,\r\n                }, () => {\r\n                    if (this.state.movies.length === 0) {\r\n                        swal({\r\n                            title: 'No available titles',\r\n                            button: 'OK',\r\n                        })\r\n                    }\r\n                });\r\n            });\r\n        }).catch(() => {\r\n            swal({\r\n                title: 'Something went wrong!! Please try again later!!',\r\n                button: 'OK',\r\n            })\r\n        });\r\n    }\r\n\r\n    // to handle the search form submitting\r\n    handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        this.searchForMovies();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"movieSearchArea\">\r\n                <div className=\"wrapper\">\r\n                    <div className=\"movieSearchContainer\">\r\n                        {/* two conditions to load the search form 1) no results yet and 2) there is no keyword in the url comming from \"back to resullt\" link in \"MovieDetials\" */}\r\n                        {this.state.movies.length === 0 && typeof this.props.match.params.keyword == 'undefined' ?\r\n                            <div className=\"movieHead\">\r\n                                <h1>quick flick picker</h1>\r\n                                <form className=\"movieSearchForm\" action=\"\" onSubmit={this.handleSubmit}>\r\n                                    <label htmlFor=\"keywordInput\" className=\"visuallyHidden\">enter a keyword to search for a movie</label>\r\n                                    <input className=\"movieSearchBar\" type=\"text\" id=\"keywordInput\" required onChange={this.handleKeyword} value={this.state.keyword} placeholder=\"Search for a movie...\" />\r\n                                    <button className=\"watchMovieBtn movieSearchButton\" type=\"submit\">find movie</button>\r\n                                </form>\r\n                            </div>\r\n                            :\r\n                            <ul className=\"moviePosterContainer\">\r\n                                {\r\n                                    this.state.movies.map((movie) => {\r\n                                        return (\r\n                                            <li key={movie.id} className=\"moviePoster\">\r\n                                                <AddToLists movieId={movie.id} />\r\n                                                <Link key={movie.id} to={`/movies/${this.state.keyword}/ /${movie.id}`}>\r\n                                                    <img src={`http://image.tmdb.org/t/p/w500/${movie.poster_path}`} alt={movie.title} />\r\n                                                </Link>\r\n                                            </li>\r\n                                        )\r\n                                    })\r\n                                }\r\n                            </ul>\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default MovieSearch;\r\n","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport {Link} from 'react-router-dom';\r\nimport AddToLists from './AddToLists.js';\r\nimport GetMovieDetails from './GetMovieDetails.js';\r\nimport swal from 'sweetalert';\r\n\r\n\r\nclass MovieDetails extends Component {\r\n    constructor (){\r\n        super();\r\n        this.state = {\r\n            movieDetails: {},\r\n            movieGenre: [],\r\n            credits: {},\r\n            directors: [],\r\n            cast: [],\r\n            videoLink:'',\r\n            movieId:'',\r\n            keyword:'',\r\n            listName:'',\r\n        } \r\n    }\r\n\r\n    componentDidMount = () => {\r\n        if (typeof this.props.match.params.keyword != 'undefined'){\r\n            const keyword = this.props.match.params.keyword;\r\n            if(keyword!==' ') {\r\n                this.setState({\r\n                    keyword: keyword,\r\n                });\r\n            }\r\n        }\r\n        if (typeof this.props.match.params.listName != 'undefined') {\r\n            const listName = this.props.match.params.listName;\r\n            if (listName !== ' ') {\r\n            this.setState({\r\n                listName: listName,\r\n            })\r\n        }\r\n        }\r\n        const movieId = this.props.match.params.movieID;\r\n        this.setState({\r\n            movieId:movieId,\r\n        })\r\n\r\n        // get cast and crew\r\n        axios({\r\n            url: `https://api.themoviedb.org/3/movie/${movieId}/credits`,\r\n            params: {\r\n                api_key: '8341ba99fae06408554c7e8411e4a4f9',\r\n            }\r\n        }).then(response => {\r\n            const  credits = response.data;\r\n\r\n            // if the job is directing, return to the new array\r\n            const director = credits.crew.filter((crew) => {\r\n              \r\n                    return(crew.job === 'Director');\r\n            })\r\n\r\n            // take only first 5 cast members\r\n            const cast = credits.cast.filter((castMember, index) => {\r\n                    return index <= 4; // small change\r\n            })\r\n            \r\n            // set state\r\n            this.setState({\r\n                directors: director,\r\n                cast: cast,\r\n            })\r\n        }).catch(()=>{\r\n            swal({\r\n                text: 'Something went wrong!! Please try again later!!',\r\n                button: 'OK',\r\n            })\r\n        });\r\n\r\n        // get video link\r\n        axios ({\r\n            url: `https://api.themoviedb.org/3/movie/${movieId}/videos`,\r\n            params: {\r\n                api_key: '8341ba99fae06408554c7e8411e4a4f9',\r\n            }\r\n        }).then(response => {\r\n            const videos = response.data;\r\n\r\n            // check if video results is undefined\r\n            if(videos.results[0] !== undefined){\r\n                // set state\r\n                this.setState({\r\n                    videoLink: `https://www.youtube.com/embed/${videos.results[0].key}`,\r\n                })\r\n\r\n                // if it is undefined, set state to null\r\n            } else {\r\n                this.setState({\r\n                    videoLink: null,\r\n                })\r\n            }\r\n        }).catch(() => {\r\n            swal({\r\n                text: 'Something went wrong!! Please try again later!!',\r\n                button: 'OK',\r\n            })\r\n        });\r\n\r\n    }\r\n\r\n    // call function to get movie details from other component\r\n    getMovieDetails = (movieDetails) => {\r\n        this.setState({\r\n            movieDetails: movieDetails,\r\n            movieGenre: movieDetails.genres,\r\n        })\r\n    }\r\n\r\n    render(){    \r\n        return (\r\n            <section className=\"movieDetails\">\r\n                <div className=\"wrapper\">                   \r\n                    <div className=\"movieDetailContainer\">\r\n                        {this.state.keyword !== '' ?\r\n                            <Link className=\"goBack\" to={`/quickFlickPicker25/${this.state.keyword}`}>Back to results</Link>\r\n                            : null}\r\n                        {this.state.listName !== '' ?\r\n                            <Link className=\"goBack\" to={`/watch-movie/${this.state.listName}`}>Watch Another Movie</Link>\r\n                            : null}\r\n                        {this.state.movieId !=='' ? \r\n                        <div className=\"addButton\">\r\n                            <AddToLists movieId={this.state.movieId} /> \r\n                            <GetMovieDetails movieDetails={this.getMovieDetails} movieID={this.state.movieId}/>\r\n                            </div>\r\n                        : null} \r\n                      \r\n                        <div className=\"detailsPage\">\r\n                            <div className=\"posterContainer\">\r\n                                <img src={`http://image.tmdb.org/t/p/w500/${this.state.movieDetails.poster_path}`} alt=\"\"/>\r\n                            </div>\r\n                            <div className=\"movieInfo\">\r\n\r\n                                <h1 className=\"detailTitle\">{this.state.movieDetails.title}</h1>\r\n                                \r\n                                <div className=\"threeDetails\">\r\n                                    <div className=\"genres\">\r\n                                        <h2>Genres</h2>\r\n                                        {/* map through the genres, and display them */}\r\n                                        {\r\n                                            this.state.movieGenre.map((genre, index) => {\r\n                                                return (\r\n                                                    <p key={index}>{genre.name}</p>\r\n                                                    )\r\n                                                })\r\n                                            }\r\n                                    </div>\r\n                                    <div className=\"director\">\r\n                                        <h2>Director</h2>\r\n                                        {/* map through the directors and display them */}\r\n                                        {\r\n                                            this.state.directors.map((director)=>{\r\n                                                return(\r\n                                                    <p key={director.credit_id}>{director.name}</p>\r\n                                                    )\r\n                                                })\r\n                                            }\r\n                                    </div>\r\n                                    <div className=\"cast\">\r\n                                        <h2>Cast</h2>\r\n                                        {/* map through the cast members and display */}\r\n                                        {\r\n                                            this.state.cast.map((actor)=>{\r\n                                                return(\r\n                                                    <p key={actor.credit_id}>{actor.name}</p>\r\n                                                    )\r\n                                                })\r\n                                            }\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"description\">\r\n                                    <h2>Description</h2>\r\n                                    <p>{this.state.movieDetails.overview}</p>\r\n                                </div>\r\n                                <div className=\"trailer\">\r\n                                    {this.state.videoLink === null ? null : \r\n                                    <a className=\"watchVideo\" target=\"_blank\" rel=\"noopener noreferrer\"  href={this.state.videoLink}>Watch Trailer</a>\r\n                                    }   \r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div> \r\n\r\n            </section>\r\n        )\r\n    }\r\n}\r\n\r\nexport default MovieDetails;","import React, { Component } from 'react';\r\nimport firebase from './firebase.js';\r\nimport swal from 'sweetalert';\r\n\r\nclass WatchMovie extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            ListMovies: [],\r\n            listGenres: [],\r\n            selectedGenre: '',\r\n            selectedTime: '',\r\n            movieToWatch: '',\r\n\r\n        };\r\n\r\n    }\r\n\r\n    // to load all the genres in the list\r\n    getGenres = () => {\r\n        const genres = [];\r\n        this.state.ListMovies.forEach((movie) => {\r\n            movie.name.genre.forEach((genre) => {\r\n                genres.push(genre);\r\n            });\r\n        });\r\n        const uniqueGenres = genres.filter((genre, index) => genres.indexOf(genre) === index);\r\n        this.setState({\r\n            listGenres: uniqueGenres,\r\n        })\r\n    }\r\n\r\n    //to get all the movies in the list\r\n    componentDidMount() {\r\n        const dbRef = firebase.database().ref(this.props.listName);\r\n        const stateToBeSet = [];\r\n        dbRef.on('value', (response) => {\r\n            const dataFromDb = response.val();\r\n            for (let key in dataFromDb) {\r\n                if (dataFromDb[key] === this.props.listName) {\r\n                    continue;\r\n                }\r\n                const listInfo = {\r\n                    key: key,\r\n                    name: dataFromDb[key]\r\n                }\r\n                stateToBeSet.push(listInfo);\r\n            }\r\n            if (stateToBeSet.length !== 0) {\r\n                this.setState({\r\n                    ListMovies: stateToBeSet,\r\n                }, () => {\r\n                    this.getGenres();\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    //to handle searching for a movie in the list\r\n    handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        const genre = this.state.selectedGenre;\r\n        if (this.state.selectedTime !== '' && genre !== '') {\r\n            const movies = this.state.ListMovies;\r\n            const time = parseInt(this.state.selectedTime);\r\n            const qualifyingMovies = movies.filter((movie) => {\r\n                return (parseInt(movie.name.runtime) <= time && movie.name.genre.indexOf(genre) >= 0)\r\n            });\r\n            if (qualifyingMovies.length === 0) {\r\n                swal({\r\n                    title: 'No matches in this list',\r\n                    button: 'OK',\r\n                })\r\n            }\r\n            else {\r\n                //to generate a random index => random movie\r\n                const selectedIndex = Math.floor(Math.random() * qualifyingMovies.length);\r\n                this.setState({\r\n                    movieToWatch: qualifyingMovies[selectedIndex].name.id,\r\n                }, () => {\r\n                        this.props.history.push(`/movies/ /${this.props.listName}/${this.state.movieToWatch}`);\r\n                }\r\n                );\r\n            }\r\n        }\r\n        else if (genre === '') {\r\n            swal({\r\n                title: 'Please select a genre!',\r\n                button: 'OK',\r\n            })\r\n        }\r\n        else {\r\n            swal({\r\n                title: 'Please select a time!',\r\n                button: 'OK',\r\n            })\r\n        }\r\n    }\r\n\r\n    // to handle the changes of both Genre and time select elemnts\r\n    handleChange = (event) => {\r\n        const id = event.target.id;\r\n        const value = event.target.value;\r\n        this.setState({\r\n            [id]: value,\r\n        })\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <section className=\"watchMovie\">\r\n                <div className=\"wrapper\">\r\n                    <div className=\"watchMovieContainer\">\r\n                        <div className=\"watchMovieHead\">\r\n                            <h1>\r\n                                watch a movie\r\n                            </h1>\r\n                            <form action=\"\" onSubmit={this.handleSubmit}>\r\n                                <div className=\"genreTimeString\">\r\n                                    <div className=\"firstString\">\r\n                                        <p>I feel like watching a </p>\r\n                                        <select id=\"selectedGenre\" onChange={this.handleChange}>\r\n                                            <option value=\"\">genre</option>\r\n                                            {\r\n                                                this.state.listGenres.map((genre, index) => {\r\n                                                    return (\r\n                                                        <option value={genre} key={index} >{genre}</option>\r\n\r\n                                                    )\r\n                                                })\r\n                                            }\r\n                                        </select>\r\n                                    </div>\r\n\r\n                                    <div className=\"secondString\">           \r\n                                        <p> movie and I have </p>\r\n                                        <select id=\"selectedTime\" onChange={this.handleChange}>\r\n                                            <option value=\"\">amount of time</option>\r\n                                            <option value=\"90\">Less than 1.5 hours</option>\r\n                                            <option value=\"120\">Less than 2 hours</option>\r\n                                            <option value=\"240\">All the time in the world </option>\r\n                                        </select>\r\n                                    </div> \r\n                                </div>\r\n                                <button className=\"watchMovieBtn findMovieBtn\" type=\"submit\">find movie</button>\r\n                            </form>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </section>\r\n        )\r\n    }\r\n}\r\n\r\nexport default WatchMovie;","import React, { Component } from 'react';\r\nimport Lists from './Lists.js';\r\nimport MovieSearch from './MovieSearch.js';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Route\r\n} from 'react-router-dom';\r\nimport MovieDetails from './MovieDetails.js';\r\nimport WatchMovie from './WatchMovie.js';\r\nimport logo from './assets/qfpLogo.png';\r\n\r\nclass App extends Component {\r\n  changeIcon=(event)=>{\r\n    if (event.target.tagName ===\"LABEL\"){\r\n      event.target.classList.toggle(\"change\");\r\n    }\r\n    else {\r\n      event.target.parentElement.classList.toggle(\"change\");\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n        <Router>\r\n          <div className=\"App\">\r\n          {/* <!-- hamburger menu icon --> */}\r\n            <span className=\"srOnly\">main menu</span>\r\n            <input type=\"checkbox\" id=\"toggle\" autoComplete=\"off\" />\r\n            <label htmlFor=\"toggle\" aria-hidden=\"true\" className=\"toggle\" onClick={this.changeIcon}>\r\n            <div className=\"bar1\" ></div>\r\n            <div className=\"bar2\" ></div>\r\n            <div className=\"bar3\"></div>\r\n            </label>\r\n          <div className=\"listComponent\"><Lists /></div>\r\n          {/* <!-- end of hamburger menu icon --> */}\r\n              <Route path=\"/quickFlickPicker25/:keyword?\"  component={MovieSearch} />\r\n              <Route path=\"/movies/:keyword?/:listName?/:movieID\"  component={MovieDetails} />\r\n              <Route\r\n                exact\r\n                path=\"/watch-movie/:listName\"\r\n                render={props => <WatchMovie listName={props.match.params.listName} key={props.match.params.listName}\r\n                history={props.history}  />}\r\n              />\r\n          <div className=\"logoAndSearch\" >\r\n            <a href=\"/quickFlickPicker25/\" title=\"Search Movies\"><i className=\"fas fa-search\"></i></a>\r\n            <div className=\"logoImg\">\r\n              <img src={logo} alt=\"\" />\r\n            </div>\r\n          </div>  \r\n          </div>\r\n        </Router>  \r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}